{"version":3,"file":"static/js/205.b36a98a1.chunk.js","mappings":"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","sources":["components/onError/onError.jsx","components/Form/form.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/contactList.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","pages/contacts.jsx","redux/phonebook/selectors.js"],"sourcesContent":["import { Box, Center, IconButton, Text } from '@chakra-ui/react';\nimport { selectAuthError } from '../../redux/auth/authSelectors';\nimport { selectContactsError } from '../../redux/phonebook/selectors';\nimport { RepeatIcon } from '@chakra-ui/icons';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst ErrorComponent = () => {\n  const errorContact = useSelector(selectContactsError);\n  const errorAuth = useSelector(selectAuthError);\n  return (\n    <Box bg=\"red\" w=\"100%\" p={4} color=\"white\">\n      {errorAuth && <Text>Error: {errorAuth}</Text>}\n      {errorContact && <Text>Помилка: {errorContact}</Text>}\n      <Text>Something went wrong, press the button and try again</Text>\n      <Center>\n        {' '}\n        <IconButton\n          icon={<RepeatIcon />}\n          type=\"button\"\n          colorScheme=\"gray\"\n          size=\"lg\"\n          onClick={() => {\n            window.location.reload();\n          }}\n        />\n      </Center>\n    </Box>\n  );\n};\n\nexport default ErrorComponent;\n","import { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/phonebook/slice';\nimport { selectContacts } from '../../redux/phonebook/selectors';\n\nconst phoneRegExp = RegExp(\n  /^(\\+{0,})(\\d{0,})([(]{1}\\d{1,3}[)]{0,}){0,}(\\s?\\d+|\\+\\d{2,3}\\s{1}\\d+|\\d+){1}[\\s|-]?\\d+([\\s|-]?\\d+){1,2}(\\s){0,}$/gm\n);\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(6, 'too short')\n    .max(15, 'too long')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Required'),\n});\n\nconst Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const contactIsPresent = name => {\n    return contacts.some(contact => contact.name === name);\n  };\n  return (\n    <Flex bg=\"white\" align=\"center\" justify=\"center\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          validationSchema={ContactSchema}\n          onSubmit={(values, { resetForm }) => {\n            if (contactIsPresent(values.name)) {\n              alert(`Contact with name \"${values.name}\" already exists.`);\n              return;\n            }\n            dispatch(addContact(values));\n            resetForm();\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.name && touched.name}>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.number && touched.number}>\n                  <FormLabel htmlFor=\"number\">Phone number</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"tel\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.number}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                  Add contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\nexport default Form;\n\n// import { useState } from 'react';\n// import css from './form.module.css';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts } from 'components/redux/phonebook/selectors';\n// import { addContact } from 'components/redux/phonebook/slice';\n\n// // Перевірка валідності введених значень в поля вводу за допомогою RegExp\n// const isValidName = data => {\n//   const patternName =\n//     /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n//   return patternName.test(data);\n// };\n// const isValidNumber = data => {\n//   const patternNumber =\n//     /^(\\+{0,})(\\d{0,})([(]{1}\\d{1,3}[)]{0,}){0,}(\\s?\\d+|\\+\\d{2,3}\\s{1}\\d+|\\d+){1}[\\s|-]?\\d+([\\s|-]?\\d+){1,2}(\\s){0,}$/gm;\n//   return patternNumber.test(data);\n// };\n\n// const Form = () => {\n//   const [name, setName] = useState('');\n//   const [phone, setPhone] = useState('');\n\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n\n//   // Функція обробки відправки форми\n//   const handleSubmit = evt => {\n//     // Відміняємо дії браузера за замовчуванням\n//     evt.preventDefault();\n//     // Перевіряємо валідність введених значень\n//     if (!isValidName(name)) {\n//       alert('Field \"name\" must by filled corectly!!!');\n//       return;\n//     } else if (!isValidNumber(phone)) {\n//       alert('Field \"phone number\" must by filled corectly!!!');\n//       return;\n//     }\n//     // Перевіряємо повторне введення імені контакту\n//     if (contactIsPresent(name)) {\n//       alert(`Contact with name \"${name}\" already exists.`);\n//       return;\n//     }\n\n//     // Створення об'єкту контакта\n//     const newContact = {\n//       name,\n//       phone,\n//     };\n\n//     // Виклик функції додавання контакта в store\n//     dispatch(addContact(newContact));\n\n//     // Очищаємо поля вводу\n//     reset();\n//   };\n//   // Функція перевірки повторного вводу імені контакту в записник\n//   const contactIsPresent = name => {\n//     return contacts.some(contact => contact.name === name);\n//   };\n//   // Функція контролю введених значень в поля імені та номеру телефону\n//   const handleChange = evt => {\n//     const { name, value } = evt.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'phone':\n//         setPhone(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n//   // Функція очистки полів вводу\n//   const reset = () => {\n//     setName('');\n//     setPhone('');\n//   };\n\n//   return (\n//     <form className={css.formData} onSubmit={handleSubmit}>\n//       <label>\n//         {'Name  '}\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           className={css.inputData}\n//           value={name}\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <label>\n//         {'Phone  '}\n//         <input\n//           type=\"tel\"\n//           name=\"phone\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           className={css.inputNumber}\n//           value={phone}\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <button type=\"submit\" className={css.submitButton}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n// export default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\",\"contactListItem\":\"contactList_contactListItem__T4ojX\",\"contactWrapper\":\"contactList_contactWrapper__pefR-\",\"fieldName\":\"contactList_fieldName__j1xTH\",\"fieldNumber\":\"contactList_fieldNumber__DW709\",\"deleteBtn\":\"contactList_deleteBtn__-OrU5\"};","import React from 'react';\nimport css from './contactList.module.css';\nimport { HiUserCircle } from 'react-icons/hi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectFilter,\n} from '../../redux/phonebook/selectors';\nimport { deleteContact, fetchContacts } from '../../redux/phonebook/slice';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/loader';\nimport ErrorComponent from 'components/onError/onError';\nimport { Box, Button, List, ListIcon, ListItem, Text } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <ErrorComponent />}\n      <List className={css.contactList}>\n        {filteredContacts.length > 0 &&\n          filteredContacts.map(contact => (\n            <ListItem key={contact.name} className={css.contactListItem}>\n              <ListIcon as={HiUserCircle} color=\"blue.500\" />\n              <Box className={css.contactWrapper}>\n                <Text>{contact.name}:</Text>\n                <Text className={css.fieldNumber}>{contact.number}</Text>\n                <Button\n                  type=\"button\"\n                  colorScheme=\"blue\"\n                  size=\"xs\"\n                  onClick={() => {\n                    dispatch(deleteContact(contact.id));\n                  }}\n                >\n                  Delete\n                </Button>\n              </Box>\n            </ListItem>\n          ))}\n      </List>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"filter_filterLabel__jh4CL\",\"filterInput\":\"filter_filterInput__2T6yn\"};","import React from 'react';\nimport { Input } from '@chakra-ui/react';\nimport css from './filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/phonebook/selectors';\nimport { updateFilter } from '../../redux/phonebook/slice';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <label className={css.filterLabel}>\n      {'Find contact by name  '}\n      <Input\n        type=\"text\"\n        variant=\"filled\"\n        value={value}\n        className={css.filterInput}\n        onChange={evt => {\n          dispatch(updateFilter(evt.currentTarget.value));\n        }}\n      />\n    </label>\n  );\n};\n","import Form from '../components/Form/form';\nimport { ContactList } from '../components/ContactList/contactList';\nimport { Filter } from '../components/Filter/filter';\nimport { useSelector } from 'react-redux';\nimport { selectAuthentificated } from '../redux/auth/authSelectors';\nimport { Text } from '@chakra-ui/react';\n\nconst Contacts = () => {\n  const isAuthentificated = useSelector(selectAuthentificated);\n  return (\n    isAuthentificated && (\n      <main>\n        <Text mt=\"5\" fontSize=\"3xl\" align=\"center\">\n          New contact\n        </Text>\n        <Form />\n\n        <Text mt=\"5\" fontSize=\"3xl\" align=\"center\">\n          Contact list\n        </Text>\n        <Filter />\n        <ContactList />\n      </main>\n    )\n  );\n};\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContactsStore = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.items\n);\nexport const selectContactsIsLoading = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.isLoading\n);\nexport const selectContactsError = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.error\n);\nexport const selectFilter = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.filter\n);\n"],"names":["errorContact","useSelector","selectContactsError","errorAuth","selectAuthError","_jsxs","Box","bg","w","p","color","children","Text","_jsx","Center","IconButton","icon","RepeatIcon","type","colorScheme","size","onClick","window","location","reload","phoneRegExp","RegExp","ContactSchema","Yup","shape","name","min","max","required","number","matches","dispatch","useDispatch","contacts","selectContacts","Flex","align","justify","rounded","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","some","contact","alert","concat","addContact","_ref2","handleSubmit","errors","touched","VStack","spacing","FormControl","isInvalid","FormLabel","htmlFor","Field","as","Input","id","variant","FormErrorMessage","Button","width","ContactList","isLoading","selectContactsIsLoading","error","filter","selectFilter","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","trim","_Fragment","Loader","ErrorComponent","List","className","css","length","map","ListItem","ListIcon","HiUserCircle","deleteContact","Filter","value","onChange","evt","updateFilter","currentTarget","selectAuthentificated","mt","fontSize","Form","selectContactsStore","state","phonebook","createSelector","items"],"sourceRoot":""}