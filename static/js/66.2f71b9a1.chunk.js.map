{"version":3,"file":"static/js/66.2f71b9a1.chunk.js","mappings":"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","sources":["components/redux/phonebook/selectors.js","components/Form/form.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","components/onError/onError.jsx","components/ContactList/contactList.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","components/pages/contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContactsStore = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.items\n);\nexport const selectContactsIsLoading = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.isLoading\n);\nexport const selectContactsError = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.error\n);\nexport const selectFilter = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.filter\n);\n","import { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'components/redux/phonebook/slice';\nimport { selectContacts } from 'components/redux/phonebook/selectors';\n\nconst phoneRegExp = RegExp(\n  /^(\\+{0,})(\\d{0,})([(]{1}\\d{1,3}[)]{0,}){0,}(\\s?\\d+|\\+\\d{2,3}\\s{1}\\d+|\\d+){1}[\\s|-]?\\d+([\\s|-]?\\d+){1,2}(\\s){0,}$/gm\n);\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(6, 'too short')\n    .max(15, 'too long')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Required'),\n});\n\nconst Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const contactIsPresent = name => {\n    return contacts.some(contact => contact.name === name);\n  };\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          validationSchema={ContactSchema}\n          onSubmit={(values, { resetForm }) => {\n            if (contactIsPresent(values.name)) {\n              alert(`Contact with name \"${values.name}\" already exists.`);\n              return;\n            }\n            dispatch(addContact(values));\n            resetForm();\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.name && touched.name}>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.number && touched.number}>\n                  <FormLabel htmlFor=\"number\">Phone number</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"tel\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.number}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                  Add contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\nexport default Form;\n\n// import { useState } from 'react';\n// import css from './form.module.css';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts } from 'components/redux/phonebook/selectors';\n// import { addContact } from 'components/redux/phonebook/slice';\n\n// // Перевірка валідності введених значень в поля вводу за допомогою RegExp\n// const isValidName = data => {\n//   const patternName =\n//     /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n//   return patternName.test(data);\n// };\n// const isValidNumber = data => {\n//   const patternNumber =\n//     /^(\\+{0,})(\\d{0,})([(]{1}\\d{1,3}[)]{0,}){0,}(\\s?\\d+|\\+\\d{2,3}\\s{1}\\d+|\\d+){1}[\\s|-]?\\d+([\\s|-]?\\d+){1,2}(\\s){0,}$/gm;\n//   return patternNumber.test(data);\n// };\n\n// const Form = () => {\n//   const [name, setName] = useState('');\n//   const [phone, setPhone] = useState('');\n\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n\n//   // Функція обробки відправки форми\n//   const handleSubmit = evt => {\n//     // Відміняємо дії браузера за замовчуванням\n//     evt.preventDefault();\n//     // Перевіряємо валідність введених значень\n//     if (!isValidName(name)) {\n//       alert('Field \"name\" must by filled corectly!!!');\n//       return;\n//     } else if (!isValidNumber(phone)) {\n//       alert('Field \"phone number\" must by filled corectly!!!');\n//       return;\n//     }\n//     // Перевіряємо повторне введення імені контакту\n//     if (contactIsPresent(name)) {\n//       alert(`Contact with name \"${name}\" already exists.`);\n//       return;\n//     }\n\n//     // Створення об'єкту контакта\n//     const newContact = {\n//       name,\n//       phone,\n//     };\n\n//     // Виклик функції додавання контакта в store\n//     dispatch(addContact(newContact));\n\n//     // Очищаємо поля вводу\n//     reset();\n//   };\n//   // Функція перевірки повторного вводу імені контакту в записник\n//   const contactIsPresent = name => {\n//     return contacts.some(contact => contact.name === name);\n//   };\n//   // Функція контролю введених значень в поля імені та номеру телефону\n//   const handleChange = evt => {\n//     const { name, value } = evt.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'phone':\n//         setPhone(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n//   // Функція очистки полів вводу\n//   const reset = () => {\n//     setName('');\n//     setPhone('');\n//   };\n\n//   return (\n//     <form className={css.formData} onSubmit={handleSubmit}>\n//       <label>\n//         {'Name  '}\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           className={css.inputData}\n//           value={name}\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <label>\n//         {'Phone  '}\n//         <input\n//           type=\"tel\"\n//           name=\"phone\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           className={css.inputNumber}\n//           value={phone}\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <button type=\"submit\" className={css.submitButton}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n// export default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\",\"contactListItem\":\"contactList_contactListItem__T4ojX\",\"contactWrapper\":\"contactList_contactWrapper__pefR-\",\"fieldName\":\"contactList_fieldName__j1xTH\",\"fieldNumber\":\"contactList_fieldNumber__DW709\",\"deleteBtn\":\"contactList_deleteBtn__-OrU5\"};","import { Box, Text } from '@chakra-ui/react';\nimport { selectAuthError } from 'components/redux/auth/authSelectors';\nimport { selectContactsError } from 'components/redux/phonebook/selectors';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const ErrorComponent = () => {\n  const errorContact = useSelector(selectContactsError);\n  const errorAuth = useSelector(selectAuthError);\n  return (\n    <Box>\n      {errorAuth && <Text>Помилка: {errorAuth}</Text>}\n      {errorContact && <Text>Помилка: {errorContact}</Text>}\n    </Box>\n  );\n};\n","import React from 'react';\nimport css from './contactList.module.css';\nimport { HiUserCircle } from 'react-icons/hi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectFilter,\n} from 'components/redux/phonebook/selectors';\nimport { deleteContact, fetchContacts } from 'components/redux/phonebook/slice';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/loader';\nimport { ErrorComponent } from 'components/onError/onError';\nimport { Box, Button, List, ListIcon, ListItem, Text } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <ErrorComponent />}\n      <List className={css.contactList}>\n        {filteredContacts.length > 0 &&\n          filteredContacts.map(contact => (\n            <ListItem key={contact.name} className={css.contactListItem}>\n              <ListIcon as={HiUserCircle} color=\"blue.500\" />\n              <Box className={css.contactWrapper}>\n                <Text>{contact.name}:</Text>\n                <Text className={css.fieldNumber}>{contact.number}</Text>\n                <Button\n                  type=\"button\"\n                  colorScheme=\"blue\"\n                  size=\"xs\"\n                  onClick={() => {\n                    dispatch(deleteContact(contact.id));\n                  }}\n                >\n                  Delete\n                </Button>\n              </Box>\n            </ListItem>\n          ))}\n      </List>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"filter_filterLabel__jh4CL\"};","import React from 'react';\nimport { Input } from '@chakra-ui/react';\nimport css from './filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'components/redux/phonebook/selectors';\nimport { updateFilter } from 'components/redux/phonebook/slice';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <label className={css.filterLabel}>\n      {'Find contact by name  '}\n      <Input\n        type=\"text\"\n        variant=\"filled\"\n        value={value}\n        onChange={evt => {\n          dispatch(updateFilter(evt.currentTarget.value));\n        }}\n      />\n    </label>\n  );\n};\n","import Form from '../Form/form';\nimport { ContactList } from '../ContactList/contactList';\nimport { Filter } from '../Filter/filter';\nimport { useSelector } from 'react-redux';\nimport { selectAuthentificated } from 'components/redux/auth/authSelectors';\nimport { Text } from '@chakra-ui/react';\n\nconst Contacts = () => {\n  const isAuthentificated = useSelector(selectAuthentificated);\n  return (\n    isAuthentificated && (\n      <>\n        <Text mt=\"5\" fontSize=\"3xl\">\n          New contact\n        </Text>\n        <Form />\n\n        <Text mt=\"5\" fontSize=\"3xl\">\n          Contact list\n        </Text>\n        <Filter />\n        <ContactList />\n      </>\n    )\n  );\n};\nexport default Contacts;\n"],"names":["selectContactsStore","state","phonebook","selectContacts","createSelector","contacts","items","selectContactsIsLoading","isLoading","selectContactsError","error","selectFilter","filter","phoneRegExp","RegExp","ContactSchema","Yup","shape","name","min","max","required","number","matches","dispatch","useDispatch","useSelector","_jsx","Flex","bg","align","justify","children","Box","p","rounded","w","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","some","contact","alert","concat","addContact","_ref2","handleSubmit","errors","touched","_jsxs","VStack","spacing","FormControl","isInvalid","FormLabel","htmlFor","Field","as","Input","id","type","variant","FormErrorMessage","Button","colorScheme","width","ErrorComponent","errorContact","errorAuth","selectAuthError","Text","ContactList","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","trim","_Fragment","Loader","List","className","css","length","map","ListItem","ListIcon","HiUserCircle","color","size","onClick","deleteContact","Filter","value","onChange","evt","updateFilter","currentTarget","selectAuthentificated","mt","fontSize","Form"],"sourceRoot":""}