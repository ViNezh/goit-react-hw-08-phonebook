{"version":3,"file":"static/js/87.0680da1d.chunk.js","mappings":"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","sources":["components/onError/onError.jsx","components/pages/login.jsx","components/redux/phonebook/selectors.js"],"sourcesContent":["import { Box, Center, IconButton, Text } from '@chakra-ui/react';\nimport { selectAuthError } from 'components/redux/auth/authSelectors';\nimport { selectContactsError } from 'components/redux/phonebook/selectors';\nimport { RepeatIcon } from '@chakra-ui/icons';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst ErrorComponent = () => {\n  const errorContact = useSelector(selectContactsError);\n  const errorAuth = useSelector(selectAuthError);\n  return (\n    <Box bg=\"red\" w=\"100%\" p={4} color=\"white\">\n      {errorAuth && <Text>Error: {errorAuth}</Text>}\n      {errorContact && <Text>Помилка: {errorContact}</Text>}\n      <Text>Something went wrong, press the button and try again</Text>\n      <Center>\n        {' '}\n        <IconButton\n          icon={<RepeatIcon />}\n          type=\"button\"\n          colorScheme=\"gray\"\n          size=\"lg\"\n          onClick={() => {\n            window.location.reload();\n          }}\n        />\n      </Center>\n    </Box>\n  );\n};\n\nexport default ErrorComponent;\n","import { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginThunk } from 'components/redux/auth/authSlice';\nimport { selectAuthError } from 'components/redux/auth/authSelectors';\nimport ErrorComponent from 'components/onError/onError';\n\nconst SignupSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n});\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const isError = useSelector(selectAuthError);\n  return (\n    <main>\n      {isError ? (\n        <ErrorComponent />\n      ) : (\n        <Flex bg=\"gray.100\" align=\"center\" justify=\"center\">\n          <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n            <Formik\n              initialValues={{\n                email: '',\n                password: '',\n              }}\n              validationSchema={SignupSchema}\n              onSubmit={values => {\n                dispatch(loginThunk(values));\n              }}\n            >\n              {({ handleSubmit, errors, touched }) => (\n                <form onSubmit={handleSubmit}>\n                  <VStack spacing={4} align=\"flex-start\">\n                    <FormControl>\n                      <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                      <Field\n                        as={Input}\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        variant=\"filled\"\n                        placeholder=\"example@mail.com\"\n                      />\n                      <FormErrorMessage>{errors.email}</FormErrorMessage>\n                    </FormControl>\n                    <FormControl\n                      isInvalid={!!errors.password && touched.password}\n                    >\n                      <FormLabel htmlFor=\"password\">Password</FormLabel>\n                      <Field\n                        as={Input}\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        variant=\"filled\"\n                        autoComplete=\"off\"\n                      />\n                      <FormErrorMessage>{errors.password}</FormErrorMessage>\n                    </FormControl>\n                    <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                      Login\n                    </Button>\n                  </VStack>\n                </form>\n              )}\n            </Formik>\n          </Box>\n        </Flex>\n      )}\n    </main>\n  );\n};\nexport default Login;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContactsStore = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.items\n);\nexport const selectContactsIsLoading = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.isLoading\n);\nexport const selectContactsError = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.contacts.error\n);\nexport const selectFilter = createSelector(\n  [selectContactsStore],\n  phonebook => phonebook.filter\n);\n"],"names":["errorContact","useSelector","selectContactsError","errorAuth","selectAuthError","_jsxs","Box","bg","w","p","color","children","Text","_jsx","Center","IconButton","icon","RepeatIcon","type","colorScheme","size","onClick","window","location","reload","SignupSchema","Yup","shape","password","min","max","required","email","dispatch","useDispatch","isError","ErrorComponent","Flex","align","justify","rounded","Formik","initialValues","validationSchema","onSubmit","values","loginThunk","_ref","handleSubmit","errors","touched","VStack","spacing","FormControl","FormLabel","htmlFor","Field","as","Input","id","name","variant","placeholder","FormErrorMessage","isInvalid","autoComplete","Button","width","selectContactsStore","state","phonebook","selectContacts","createSelector","contacts","items","selectContactsIsLoading","isLoading","error","selectFilter","filter"],"sourceRoot":""}