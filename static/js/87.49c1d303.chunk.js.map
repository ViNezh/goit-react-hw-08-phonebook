{"version":3,"file":"static/js/87.49c1d303.chunk.js","mappings":"wRAgBMA,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,SAAUF,EAAAA,KACPG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,cAiEtD,UA9Dc,WACZ,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5B,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGL,EACCM,MAAMN,IAENG,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CAACC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAAQL,UACjDF,EAAAA,EAAAA,KAACQ,EAAAA,GAAG,CAACH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAGT,UACvCF,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACLC,cAAe,CACbnB,MAAO,GACPJ,SAAU,IAEZwB,iBAAkB3B,EAClB4B,SAAU,SAAAC,GACRrB,GAASsB,EAAAA,EAAAA,IAAWD,GACtB,EAAEd,SAED,SAAAgB,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OAC/BrB,EAAAA,EAAAA,KAAA,QAAMe,SAAUI,EAAajB,UAC3BoB,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,QAAS,EAAGlB,MAAM,aAAYJ,SAAA,EACpCoB,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAAAvB,SAAA,EACVF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAS,CAACC,QAAQ,QAAOzB,SAAC,mBAC3BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,YAAY,sBAEdnC,EAAAA,EAAAA,KAACoC,EAAAA,GAAgB,CAAAlC,SAAEkB,EAAO1B,YAE5B4B,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CACVY,YAAajB,EAAO9B,UAAY+B,EAAQ/B,SAASY,SAAA,EAEjDF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAS,CAACC,QAAQ,WAAUzB,SAAC,cAC9BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,QAAQ,SACRI,aAAa,SAEftC,EAAAA,EAAAA,KAACoC,EAAAA,GAAgB,CAAAlC,SAAEkB,EAAO9B,eAE5BU,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CAACN,KAAK,SAASO,YAAY,OAAOC,MAAM,OAAMvC,SAAC,cAInD,SAQvB,C","sources":["components/pages/login.jsx"],"sourcesContent":["import { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginThunk } from 'components/redux/auth/authSlice';\nimport { selectAuthError } from 'components/redux/auth/authSelectors';\n\nconst SignupSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n});\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const isError = useSelector(selectAuthError);\n  return (\n    <>\n      {isError ? (\n        alert(isError)\n      ) : (\n        <Flex bg=\"gray.100\" align=\"center\" justify=\"center\">\n          <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n            <Formik\n              initialValues={{\n                email: '',\n                password: '',\n              }}\n              validationSchema={SignupSchema}\n              onSubmit={values => {\n                dispatch(loginThunk(values));\n              }}\n            >\n              {({ handleSubmit, errors, touched }) => (\n                <form onSubmit={handleSubmit}>\n                  <VStack spacing={4} align=\"flex-start\">\n                    <FormControl>\n                      <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                      <Field\n                        as={Input}\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        variant=\"filled\"\n                        placeholder=\"example@mail.com\"\n                      />\n                      <FormErrorMessage>{errors.email}</FormErrorMessage>\n                    </FormControl>\n                    <FormControl\n                      isInvalid={!!errors.password && touched.password}\n                    >\n                      <FormLabel htmlFor=\"password\">Password</FormLabel>\n                      <Field\n                        as={Input}\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        variant=\"filled\"\n                        autoComplete=\"off\"\n                      />\n                      <FormErrorMessage>{errors.password}</FormErrorMessage>\n                    </FormControl>\n                    <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                      Login\n                    </Button>\n                  </VStack>\n                </form>\n              )}\n            </Formik>\n          </Box>\n        </Flex>\n      )}\n    </>\n  );\n};\nexport default Login;\n"],"names":["SignupSchema","Yup","shape","password","min","max","required","email","dispatch","useDispatch","isError","useSelector","selectAuthError","_jsx","_Fragment","children","alert","Flex","bg","align","justify","Box","p","rounded","w","Formik","initialValues","validationSchema","onSubmit","values","loginThunk","_ref","handleSubmit","errors","touched","_jsxs","VStack","spacing","FormControl","FormLabel","htmlFor","Field","as","Input","id","name","type","variant","placeholder","FormErrorMessage","isInvalid","autoComplete","Button","colorScheme","width"],"sourceRoot":""}